module Instruction_memory(
    input [7:0] inst_addr,
    output reg [7:0] instruction
    );
    
    reg [7:0] inst_mem[0:7];    
    initial begin		
        inst_mem[0] <= 8'b00010011;    
        inst_mem[1] <= 8'b01110100;    
        inst_mem[2] <= 8'b00110110;    
        inst_mem[3] <= 8'b00001001;    
        inst_mem[4] <= 8'b10010000;    
        inst_mem[5] <= 8'b01001000;
        inst_mem[6] <= 8'b00110000;           			
		inst_mem[7] <= 8'b00010101;                 
        //$readmemh("Instruction.mem", inst_mem);
    end    
    always @(inst_addr)
        begin
            instruction <= inst_mem[inst_addr];
        end    
endmodule

`timescale 1ps/1ps
`include "../design/instruction_memory.v" 

module instruction_memory_tb();
      reg [7:0] inst_addr;
      wire [7:0] instruction;                      
	  instruction_memory a3(.pinst_addrc(inst_addr), .instruction(instruction));
      initial
		begin
			$dumpfile("vcd/instruction_memory_dump.vcd");
			$dumpvars(0,instruction_memory_tb);
            #1;
			inst_addr=8'd2; 
            #5;
			inst_addr=8'd3; 
            #5;					            		         
		end        
endmodule